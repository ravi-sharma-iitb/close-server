!function(t,i,n){var o=function(){function t(){var t=o.height(),a=o.scrollTop(),s=a+t;i.each(n,function(){var t=i(this),n=i(t).outerHeight(),o=i(t).offset().top,r=o+n;r>=a&&o<=s?e.removeClass("is-active"):e.addClass("is-active")})}var n=i.find(".holiday--header"),o=i(window),e=i("#navigation");i(window).width()>1140&&(i(window).on("scroll resize",function(){t()}),i(window).trigger("scroll"))},e=function(){function t(){for(var t=0;t<f.length;t++)f[t].update()}function i(){this.x=a(0,c),this.y=a(-d,0),this.radius=a(.5,3),this.speed=a(1,3),this.wind=a(-.5,3)}function n(t){for(var n=0;n<t;n++)f[n]=new i}function o(){r.clearRect(0,0,r.canvas.width,r.canvas.height);for(var t=0;t<f.length;t++)f[t].draw()}function e(){o(),t(),l(e)}function a(t,i){var n=(t+Math.random()*(i-t)).toFixed(1);return n=Math.round(n)}var s=document.getElementById("snow"),r=s.getContext("2d"),c=r.canvas.width=document.body.offsetWidth,d=r.canvas.height=document.body.offsetHeight,l=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame,f=[];window.onresize=function(){c=r.canvas.width=document.body.offsetWidth,d=r.canvas.height=document.body.offsetHeight},i.prototype.draw=function(){r.beginPath(),r.arc(this.x,this.y,this.radius,0,2*Math.PI),r.fillStyle="#fff",r.fill(),r.closePath()},i.prototype.update=function(){this.y+=this.speed,this.x+=this.wind,this.y>r.canvas.height&&(this.y=0,this.x=a(0,c))},n(150),e()};t.init=function(){o(),e()}}(window.Holiday=window.Holiday||{},jQuery),function(t,i,n){function o(t){i.ajax({type:t.attr("method"),url:t.attr("action"),data:t.serialize(),cache:!1,dataType:"json",contentType:"application/json; charset=utf-8",error:function(t){i(".modal-form").hide(),i(".modal-text").hide(),i("#notification_container, #notification_container-two").html('<span class="alert">Could not connect to server. Please try again later.</span>'),i("#notification_container, #notification_container-two").fadeIn(),e.addClass("force-reload"),s.addClass("force-reload")},success:function(n){if("success"!=n.result){var o=n.msg.substring(0),a='<span class="alert">Could not connect to server. Please try again later.</span>';o.indexOf("is already subscribed to list")>-1?a='<span class="alert">THANKS! YOU\'RE ALREADY ON THE LIST</span>':o.indexOf("Too many subscribe attempts for this email")>-1&&(a='<span class="alert">Too many subscribe attempts for this email address.<br />Please try again in about 5 minutes!</span>'),i("#notification_container, #notification_container-two").html(a),i("#notification_container, #notification_container-two").fadeIn(),e.addClass("force-reload"),s.addClass("force-reload")}else{var o=n.msg;t.hide(),i("#notification_container, #notification_container-two").html('<span class="alert-sucess">Thank you for signing up</span>'),i("a.show-lip-kits").text("Close window"),i("#notification_container, #notification_container-two").fadeIn(),i.cookie("kylieBirthday","subscriber",{expires:365,path:"/"})}}})}var e=i(".newsletter-modal"),a=i(".newsletter-modal .modal-contents"),s=i(".close-modal"),r=i("#mc-embedded-subscribe-form"),c=i("#mc-embedded-subscribe-form-2"),d=i(".icon-close"),l=window.shop.emailPop,h=function(){i(".kylie-email-holder").focus(function(){i(this).data("placeholder",i(this).attr("placeholder")).attr("placeholder","")}).blur(function(){i(this).attr("placeholder",i(this).data("placeholder"))}),e.click(function(){i(this).hasClass("force-reload")?window.location.reload():e.fadeOut()}),i("a.show-lip-kits").click(function(){return i("[data-remodal-id=modal]").remodal().close(),!1}),d.click(function(){return i("body").removeClass("email-active"),!1}),a.click(function(t){t.stopPropagation()}),r.submit(function(t){t.preventDefault(),o(r),e.fadeIn()}),c.submit(function(t){t.preventDefault(),o(c)})};t.init=function(){1==l,h()}}(window.NewsletterModal=window.NewsletterModal||{},jQuery),function(t,i){var n=function(){i(".hp-slider").slick({slidesToShow:1,slidesToScroll:1,arrows:!0,lazyLoad:"progressive",autoplay:!0,autoplaySpeed:5e3})};t.init=function(){n()}}(window.Sliders=window.Sliders||{},jQuery,void 0),function(t,i){var n=function(){var t=(i("#pack-container"),767);i(function(){var n=document.querySelector("#pack-container");new Packery(n,{itemSelector:".item",gutter:0});i(window).width()>=t,i(window).on("resize",function(){i(window).width()>=t})}),i(".item a").click(function(){var t=i(this).attr("data-src-img"),n="<img src="+t+" class='item item--content'/>",o=i(".modal-fill");i(o).empty().append(n);var e={};i("[data-remodal-id=modal-gallery]").remodal(e).open()})};t.init=function(){n()}}(window.Valentine=window.Valentine||{},jQuery,void 0);
//# sourceMappingURL=data:application/json;base64,
